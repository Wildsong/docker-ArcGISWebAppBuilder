<?xml version="1.0" encoding="UTF-8"?><!-- Copyright @ 2020 Esri. All rights reserved under the copyright laws of the United States and applicable international laws, treaties, and conventions. --><snippets><snippet name="pointExtrudeFS"><![CDATA[
#ifdef GL_ES
precision mediump float;
#endif
uniform float ss;uniform vec3 mm;uniform vec4 ip;uniform vec4 ps;uniform vec4 me;uniform vec3 camPos;varying vec4 gh;varying vec3 hg;varying vec3 gc;const vec3 a=vec3(1.0,1.0,1.0);const vec3 b=vec3(1.0,1.0,1.0);const vec3 c=vec3(0.2,0.2,0.2);void main(){vec3 d=normalize(gc-camPos);vec3 e=normalize(hg);vec3 f=normalize(reflect(d,e));float g=max(dot(f,mm),.001);vec3 h=c*me.rgb*me.w*pow(g,18.0);vec3 i=a*ps.rgb*ps.w*clamp(dot(e,mm),.0,1.0);vec3 j=b*ip.rgb*ip.w;vec3 k=vec3(j+i+h);gl_FragColor.xyz=gh.xyz*k;float l=ss*0.01;gl_FragColor.w=l;}]]></snippet><snippet name="pointExtrudeVS"><![CDATA[attribute vec3 $position;attribute vec3 $auxpos1;attribute vec3 $normal;attribute vec3 $auxpos2;uniform mat4 so;uniform mat4 viewMat;uniform sampler2D oi;uniform sampler2D ol;uniform float ii;uniform vec3 po;uniform vec3 origin;uniform vec3 camPos;uniform sampler2D oo;uniform vec3 ls;uniform float io;uniform float pm;uniform vec2 il;uniform vec2 mi;uniform bool ms;uniform float ee;uniform vec4 es;varying vec4 gh;varying vec3 hg;varying vec3 gc; $linearInterpolator  $lonlat2position  $translationMat  $localTrans  $quintEaseOut const float a=1.0;const float b=0.0;vec4 matchPixelCenter(vec4 c,vec2 d){vec2 e=vec2(.500123)+.5*c.xy/c.w;vec2 f=floor(e*d);vec2 g=vec2(1.0)/d;vec2 h=(((vec2(.5)+f)*g)*2.0-vec2(1.0))*c.w;return vec4(h.x,h.y,c.z,c.w);}void main(void){float i=fract($auxpos2.x/il.x);float j=floor($auxpos2.x/il.y)/il.y;float k=(texture2D(oi,vec2(i,j))).r;float l=(texture2D(ol,vec2(i,j))).r;float m=mod(io,ii);float n=getQuintEaseInOutValue(m,k,l,ii);if(ms){n=l;}float o=getLinearValue(mi,n);float p=$auxpos2.y*pm*2.0*PI;vec3 q=vec3(po.x*cos(p),po.x*sin(p),0.0);bool r=false;if($auxpos2.z==a){r=true;}else if($auxpos2.z==b){r=false;}vec3 s=po.x*$position+$auxpos1;vec3 t=(viewMat*vec4($auxpos1,1.0)).xyz;vec3 u;mat4 v=mat4(1.0);
#ifdef GLOBAL
u=normalize(s+origin);
#else
u=vec3(0.0,0.0,1.0);
#endif
vec3 w=(viewMat*vec4(s,1.0)).xyz;hg=normalize(w-t);if(r){gh=texture2D(oo,vec2(o,0.5));s+=(u*getScope(po.yz,o));}else{gh=vec4(ls,1.0);}vec3 x=vec3(1.0,0.0,0.0);float y=1.0;float z=1.0;float A=abs(dot(u,normalize(camPos-s)));float B=0.00001;w=(viewMat*vec4(s,1.0)).xyz;if(A>.01){float C=sqrt(1.0-A*A)/A;float D=(1.0-C/es[2]);if(z>0.0){w*=D;}else{w/=D;}}w+=x;vec4 E=so*vec4(w,1.0);E.z-=z*B*E.w;gl_Position=matchPixelCenter(E,es.zw);hg=normalize(u+hg*0.5);gc=w;}]]></snippet></snippets>